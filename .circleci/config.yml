version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1.13-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v3-pkg-cache-{{ checksum "go.sum" }}
            - v3-pkg-cache
      - run:
          name: Lint
          command: |
            make vet
      - run:
          name: Build
          command: |
            make all
      - run:
          name: Unit tests
          command: |
            make unit
      - save_cache:
          key: v3-pkg-cache-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg"

  integration:
    docker:
      - image: circleci/golang:1.13-stretch
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Checkout SCION
          command: |
            # Get scion version from go modules. The sed command extracts the
            # replacement if one is specified in the go.mod file.
            scion_mod_version=$(go list -m github.com/scionproto/scion | sed -s 's/.*\s*=>\s*//')
            scion_repo=https://${scion_mod_version% *}.git
            # Extract the tag or commit hash; this is the last part of the go
            # modules version string, separated by a space from the module
            # name; the format looks like this:
            #   github.com/scionproto/scion v0.4.1-c0ffeeabc    # pseudo-tag followed by commit hash, or
            #   github.com/scionproto/scion v0.5.0              # actual tag
            scion_commit=${scion_mod_version##*[ -]}
            git clone ${scion_repo} ~/scion
            cd ~/scion
            git checkout --quiet ${scion_commit}
      - restore_cache:
          keys:
            - v1-pkg-cache-{{ checksum "~/scion/go.sum" }}-{{ checksum "go.sum" }}
            - v1-pkg-cache-{{ checksum "~/scion/go.sum" }}-
            - v1-pkg-cache-
      - run:
          name: Build SCION services and install python3 dependencies
          command: |
            cd ~/scion
            for service in "border" "cs" "godispatcher" "sciond" "tools/scion-pki"; do
              go build -o ./bin/ ./go/${service}/ && echo "Built ${service}";
            done

            sudo apt-get update && sudo apt-get install --assume-yes python3 python3-pip
            pip3 install -U wheel setuptools
            pip3 install -r ~/scion/env/pip3/requirements.txt
      - run:
          name: Configure and start local SCION AS
          command: |
            export PYTHONPATH=~/scion/python/
            cd ~/scion

            # Generate Tiny.topo
            printf '#!/bin/bash\necho "0.0.0.0"' > tools/docker-ip # Some hackery to make topo scripts run
            python/topology/generator.py -c ./topology/Tiny.topo
            # Generate gen-certs
            mkdir gen-certs gen-cache
            openssl genrsa -out "gen-certs/tls.key" 2048
            openssl req -new -x509 -key "gen-certs/tls.key" -out "gen-certs/tls.pem" -days 3650 -subj /CN=scion_def_srv

            sudo mkdir /run/shm -m 777

            # Start one AS only (1-ff00:0:110 is referenced explicitly from the integration tests)
            # XXX(matzf): explicitly start services but not the routers (which are not needed here) -- routers require to set some IPv6 addresses and this does not seem to work here
            supervisor/supervisor.sh reload
            supervisor/supervisor.sh start \
              dispatcher \
              as1-ff00_0_110:cs1-ff00_0_110-1 \
              as1-ff00_0_110:sd1-ff00_0_110
      - run:
          name: Integration tests
          command: |
            export SCION_DAEMON_ADDRESS="127.0.0.12:30255"
            make integration
      - save_cache:
          key: v1-pkg-cache-{{ checksum "~/scion/go.sum" }}-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg"

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - integration

// generated by jsonenums -type=Hash; DO NOT EDIT

package algorithmTypes

import (
	"encoding/json"
	"fmt"
)

var (
	_HashNameToValue = map[string]Hash{
		"NoHashAlgo": NoHashAlgo,
		"Sha256":     Sha256,
		"Sha384":     Sha384,
		"Sha512":     Sha512,
		"Shake256":   Shake256,
		"Fnv64":      Fnv64,
		"Fnv128":     Fnv128,
	}

	_HashValueToName = map[Hash]string{
		NoHashAlgo: "NoHashAlgo",
		Sha256:     "Sha256",
		Sha384:     "Sha384",
		Sha512:     "Sha512",
		Shake256:   "Shake256",
		Fnv64:      "Fnv64",
		Fnv128:     "Fnv128",
	}
)

func init() {
	var v Hash
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_HashNameToValue = map[string]Hash{
			interface{}(NoHashAlgo).(fmt.Stringer).String(): NoHashAlgo,
			interface{}(Sha256).(fmt.Stringer).String():     Sha256,
			interface{}(Sha384).(fmt.Stringer).String():     Sha384,
			interface{}(Sha512).(fmt.Stringer).String():     Sha512,
			interface{}(Shake256).(fmt.Stringer).String():   Shake256,
			interface{}(Fnv64).(fmt.Stringer).String():      Fnv64,
			interface{}(Fnv128).(fmt.Stringer).String():     Fnv128,
		}
	}
}

// MarshalJSON is generated so Hash satisfies json.Marshaler.
func (r Hash) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _HashValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Hash: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Hash satisfies json.Unmarshaler.
func (r *Hash) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Hash should be a string, got %s", data)
	}
	v, ok := _HashNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Hash %q", s)
	}
	*r = v
	return nil
}

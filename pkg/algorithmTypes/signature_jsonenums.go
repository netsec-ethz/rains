// generated by jsonenums -type=Signature; DO NOT EDIT

package algorithmTypes

import (
	"encoding/json"
	"fmt"
)

var (
	_SignatureNameToValue = map[string]Signature{
		"Ed25519": Ed25519,
		"Ed448":   Ed448,
	}

	_SignatureValueToName = map[Signature]string{
		Ed25519: "Ed25519",
		Ed448:   "Ed448",
	}
)

func init() {
	var v Signature
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_SignatureNameToValue = map[string]Signature{
			interface{}(Ed25519).(fmt.Stringer).String(): Ed25519,
			interface{}(Ed448).(fmt.Stringer).String():   Ed448,
		}
	}
}

// MarshalJSON is generated so Signature satisfies json.Marshaler.
func (r Signature) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _SignatureValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Signature: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Signature satisfies json.Unmarshaler.
func (r *Signature) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Signature should be a string, got %s", data)
	}
	v, ok := _SignatureNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Signature %q", s)
	}
	*r = v
	return nil
}

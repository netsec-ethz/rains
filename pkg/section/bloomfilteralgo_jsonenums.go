// generated by jsonenums -type=BloomFilterAlgo; DO NOT EDIT

package section

import (
	"encoding/json"
	"fmt"
)

var (
	_BloomFilterAlgoNameToValue = map[string]BloomFilterAlgo{
		"BloomKM12": BloomKM12,
		"BloomKM16": BloomKM16,
		"BloomKM20": BloomKM20,
		"BloomKM24": BloomKM24,
	}

	_BloomFilterAlgoValueToName = map[BloomFilterAlgo]string{
		BloomKM12: "BloomKM12",
		BloomKM16: "BloomKM16",
		BloomKM20: "BloomKM20",
		BloomKM24: "BloomKM24",
	}
)

func init() {
	var v BloomFilterAlgo
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_BloomFilterAlgoNameToValue = map[string]BloomFilterAlgo{
			interface{}(BloomKM12).(fmt.Stringer).String(): BloomKM12,
			interface{}(BloomKM16).(fmt.Stringer).String(): BloomKM16,
			interface{}(BloomKM20).(fmt.Stringer).String(): BloomKM20,
			interface{}(BloomKM24).(fmt.Stringer).String(): BloomKM24,
		}
	}
}

// MarshalJSON is generated so BloomFilterAlgo satisfies json.Marshaler.
func (r BloomFilterAlgo) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _BloomFilterAlgoValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid BloomFilterAlgo: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so BloomFilterAlgo satisfies json.Unmarshaler.
func (r *BloomFilterAlgo) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BloomFilterAlgo should be a string, got %s", data)
	}
	v, ok := _BloomFilterAlgoNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid BloomFilterAlgo %q", s)
	}
	*r = v
	return nil
}

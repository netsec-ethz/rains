// generated by jsonenums -type=KeySpaceID; DO NOT EDIT

package keys

import (
	"encoding/json"
	"fmt"
)

var (
	_KeySpaceIDNameToValue = map[string]KeySpaceID{
		"RainsKeySpace": RainsKeySpace,
	}

	_KeySpaceIDValueToName = map[KeySpaceID]string{
		RainsKeySpace: "RainsKeySpace",
	}
)

func init() {
	var v KeySpaceID
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_KeySpaceIDNameToValue = map[string]KeySpaceID{
			interface{}(RainsKeySpace).(fmt.Stringer).String(): RainsKeySpace,
		}
	}
}

// MarshalJSON is generated so KeySpaceID satisfies json.Marshaler.
func (r KeySpaceID) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _KeySpaceIDValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid KeySpaceID: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so KeySpaceID satisfies json.Unmarshaler.
func (r *KeySpaceID) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("KeySpaceID should be a string, got %s", data)
	}
	v, ok := _KeySpaceIDNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid KeySpaceID %q", s)
	}
	*r = v
	return nil
}
